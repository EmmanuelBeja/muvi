/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as FavouritesRouteImport } from './routes/favourites'
import { Route as _notFoundRouteImport } from './routes/__not-found'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MoviesIndexRouteImport } from './routes/movies/index'
import { Route as MoviesMovieIdRouteImport } from './routes/movies/$movieId'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const FavouritesRoute = FavouritesRouteImport.update({
  id: '/favourites',
  path: '/favourites',
  getParentRoute: () => rootRouteImport,
} as any)
const _notFoundRoute = _notFoundRouteImport.update({
  id: '/__not-found',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MoviesIndexRoute = MoviesIndexRouteImport.update({
  id: '/movies/',
  path: '/movies/',
  getParentRoute: () => rootRouteImport,
} as any)
const MoviesMovieIdRoute = MoviesMovieIdRouteImport.update({
  id: '/movies/$movieId',
  path: '/movies/$movieId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/favourites': typeof FavouritesRoute
  '/login': typeof LoginRoute
  '/movies/$movieId': typeof MoviesMovieIdRoute
  '/movies': typeof MoviesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/favourites': typeof FavouritesRoute
  '/login': typeof LoginRoute
  '/movies/$movieId': typeof MoviesMovieIdRoute
  '/movies': typeof MoviesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/__not-found': typeof _notFoundRoute
  '/favourites': typeof FavouritesRoute
  '/login': typeof LoginRoute
  '/movies/$movieId': typeof MoviesMovieIdRoute
  '/movies/': typeof MoviesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/favourites' | '/login' | '/movies/$movieId' | '/movies'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/favourites' | '/login' | '/movies/$movieId' | '/movies'
  id:
    | '__root__'
    | '/'
    | '/__not-found'
    | '/favourites'
    | '/login'
    | '/movies/$movieId'
    | '/movies/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  _notFoundRoute: typeof _notFoundRoute
  FavouritesRoute: typeof FavouritesRoute
  LoginRoute: typeof LoginRoute
  MoviesMovieIdRoute: typeof MoviesMovieIdRoute
  MoviesIndexRoute: typeof MoviesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/favourites': {
      id: '/favourites'
      path: '/favourites'
      fullPath: '/favourites'
      preLoaderRoute: typeof FavouritesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/__not-found': {
      id: '/__not-found'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof _notFoundRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movies/': {
      id: '/movies/'
      path: '/movies'
      fullPath: '/movies'
      preLoaderRoute: typeof MoviesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movies/$movieId': {
      id: '/movies/$movieId'
      path: '/movies/$movieId'
      fullPath: '/movies/$movieId'
      preLoaderRoute: typeof MoviesMovieIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  _notFoundRoute: _notFoundRoute,
  FavouritesRoute: FavouritesRoute,
  LoginRoute: LoginRoute,
  MoviesMovieIdRoute: MoviesMovieIdRoute,
  MoviesIndexRoute: MoviesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
